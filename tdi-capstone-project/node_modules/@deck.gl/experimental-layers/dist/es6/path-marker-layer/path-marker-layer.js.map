{"version":3,"sources":["../../../src/path-marker-layer/path-marker-layer.js"],"names":["CompositeLayer","COORDINATE_SYSTEM","ScatterplotLayer","PathOutlineLayer","MeshLayer","Arrow2DGeometry","createPathMarkers","getClosestPointOnPolyline","DISTANCE_FOR_MULTI_ARROWS","ARROW_HEAD_SIZE","ARROW_TAIL_WIDTH","DEFAULT_MARKER_LAYER","DEFAULT_MARKER_LAYER_PROPS","mesh","headSize","tailWidth","defaultProps","Object","assign","MarkerLayer","markerLayerProps","sizeScale","fp64","hightlightIndex","highlightPoint","getPath","x","path","getColor","color","getMarkerColor","getDirection","direction","getMarkerPercentages","object","lineLength","PathMarkerLayer","initializeState","state","markers","closestPoint","projectFlat","xyz","viewport","coordinateSystem","coordinateOrigin","METER_OFFSETS","metersToLngLatDelta","dx","dy","y","LNGLAT_OFFSETS","updateState","props","oldProps","changeFlags","dataChanged","updateTriggersChanged","data","context","o","_recalculateClosestPoint","propsChanged","point","highlightIndex","points","p","closestPoints","position","getPickingInfo","info","renderLayers","getSubLayerProps","id","pickable","parameters","blend","depthTest","layerName"],"mappings":"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","sourcesContent":["import {CompositeLayer, COORDINATE_SYSTEM} from '@deck.gl/core';\nimport {ScatterplotLayer} from '@deck.gl/layers';\nimport PathOutlineLayer from '../path-outline-layer/path-outline-layer';\nimport MeshLayer from '../mesh-layer/mesh-layer';\nimport Arrow2DGeometry from './arrow-2d-geometry';\n\nimport createPathMarkers from './create-path-markers';\nimport {getClosestPointOnPolyline} from './polyline';\n\nconst DISTANCE_FOR_MULTI_ARROWS = 0.1;\nconst ARROW_HEAD_SIZE = 0.2;\nconst ARROW_TAIL_WIDTH = 0.05;\n// const ARROW_CENTER_ADJUST = -0.8;\n\nconst DEFAULT_MARKER_LAYER = MeshLayer;\n\nconst DEFAULT_MARKER_LAYER_PROPS = {\n  mesh: new Arrow2DGeometry({headSize: ARROW_HEAD_SIZE, tailWidth: ARROW_TAIL_WIDTH})\n};\n\nconst defaultProps = Object.assign({}, PathOutlineLayer.defaultProps, {\n  MarkerLayer: DEFAULT_MARKER_LAYER,\n  markerLayerProps: DEFAULT_MARKER_LAYER_PROPS,\n\n  sizeScale: 100,\n  fp64: false,\n\n  hightlightIndex: -1,\n  highlightPoint: null,\n\n  getPath: x => x.path,\n  getColor: x => x.color,\n  getMarkerColor: x => [0, 0, 0, 255],\n  getDirection: x => x.direction,\n  getMarkerPercentages: (object, {lineLength}) =>\n    lineLength > DISTANCE_FOR_MULTI_ARROWS ? [0.25, 0.5, 0.75] : [0.5]\n});\n\nexport default class PathMarkerLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      markers: [],\n      mesh: new Arrow2DGeometry({headSize: ARROW_HEAD_SIZE, tailWidth: ARROW_TAIL_WIDTH}),\n      closestPoint: null\n    };\n  }\n\n  projectFlat(xyz, viewport, coordinateSystem, coordinateOrigin) {\n    if (coordinateSystem === COORDINATE_SYSTEM.METER_OFFSETS) {\n      const [dx, dy] = viewport.metersToLngLatDelta(xyz);\n      const [x, y] = coordinateOrigin;\n      return viewport.projectFlat([x + dx, dy + y]);\n    } else if (coordinateSystem === COORDINATE_SYSTEM.LNGLAT_OFFSETS) {\n      const [dx, dy] = xyz;\n      const [x, y] = coordinateOrigin;\n      return viewport.projectFlat([x + dx, dy + y]);\n    }\n\n    return viewport.projectFlat(xyz);\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    if (changeFlags.dataChanged || changeFlags.updateTriggersChanged) {\n      const {\n        data,\n        getPath,\n        getDirection,\n        getMarkerColor,\n        getMarkerPercentages,\n        coordinateSystem,\n        coordinateOrigin\n      } = this.props;\n      const {viewport} = this.context;\n      const projectFlat = o => this.projectFlat(o, viewport, coordinateSystem, coordinateOrigin);\n      this.state.markers = createPathMarkers({\n        data,\n        getPath,\n        getDirection,\n        getColor: getMarkerColor,\n        getMarkerPercentages,\n        projectFlat\n      });\n      this._recalculateClosestPoint();\n    }\n    if (changeFlags.propsChanged) {\n      if (props.point !== oldProps.point) {\n        this._recalculateClosestPoint();\n      }\n    }\n  }\n\n  _recalculateClosestPoint() {\n    const {highlightPoint, highlightIndex} = this.props;\n    if (highlightPoint && highlightIndex >= 0) {\n      const object = this.props.data[highlightIndex];\n      const points = this.props.getPath(object);\n      const {point} = getClosestPointOnPolyline({points, p: highlightPoint});\n      this.state.closestPoints = [\n        {\n          position: point\n        }\n      ];\n    } else {\n      this.state.closestPoints = [];\n    }\n  }\n\n  getPickingInfo({info}) {\n    return Object.assign(info, {\n      // override object with picked feature\n      object: (info.object && info.object.path) || info.object\n    });\n  }\n\n  renderLayers() {\n    return [\n      new PathOutlineLayer(\n        this.props,\n        this.getSubLayerProps({\n          id: 'paths',\n          // Note: data has to be passed explicitly like this to avoid being empty\n          data: this.props.data\n        })\n      ),\n      new this.props.MarkerLayer(\n        this.getSubLayerProps(\n          Object.assign({}, this.props.markerLayerProps, {\n            id: 'markers',\n            data: this.state.markers,\n            sizeScale: this.props.sizeScale,\n            fp64: this.props.fp64,\n            pickable: false,\n            parameters: {\n              blend: false,\n              depthTest: false\n            }\n          })\n        )\n      ),\n      this.state.closestPoints &&\n        new ScatterplotLayer({\n          id: `${this.props.id}-highlight`,\n          data: this.state.closestPoints,\n          fp64: this.props.fp64\n        })\n    ];\n  }\n}\n\nPathMarkerLayer.layerName = 'PathMarkerLayer';\nPathMarkerLayer.defaultProps = defaultProps;\n"],"file":"path-marker-layer.js"}