{"version":3,"sources":["../../../src/trips-layer/trips-layer.js"],"names":["Layer","Model","Geometry","tripsVertex","tripsFragment","defaultProps","trailLength","currentTime","getPath","d","path","getColor","color","TripsLayer","initializeState","gl","context","attributeManager","getAttributeManager","model","getModel","add","indices","size","update","calculateIndices","isIndexed","positions","calculatePositions","colors","accessor","calculateColors","getExtension","setState","updateState","props","dataChanged","changeFlags","countVertices","data","state","invalidateAll","id","vs","fs","geometry","drawMode","vertexCount","onBeforeRender","enable","BLEND","POLYGON_OFFSET_FILL","polygonOffset","blendFunc","SRC_ALPHA","ONE","blendEquation","FUNC_ADD","onAfterRender","ONE_MINUS_SRC_ALPHA","disable","pathLengths","reduce","acc","l","length","draw","uniforms","render","Object","assign","attribute","indicesCount","Uint32Array","offset","index","i","j","value","setVertexCount","Float32Array","pt","layerName"],"mappings":"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","sourcesContent":["import {Layer} from '@deck.gl/core';\n\nimport {Model, Geometry} from 'luma.gl';\n\nimport tripsVertex from './trips-layer-vertex.glsl';\nimport tripsFragment from './trips-layer-fragment.glsl';\n\nconst defaultProps = {\n  trailLength: 120,\n  currentTime: 0,\n  getPath: d => d.path,\n  getColor: d => d.color\n};\n\nexport default class TripsLayer extends Layer {\n  initializeState() {\n    const {gl} = this.context;\n    const attributeManager = this.getAttributeManager();\n\n    const model = this.getModel(gl);\n\n    attributeManager.add({\n      indices: {size: 1, update: this.calculateIndices, isIndexed: true},\n      positions: {size: 3, update: this.calculatePositions},\n      colors: {size: 3, accessor: 'getColor', update: this.calculateColors}\n    });\n\n    gl.getExtension('OES_element_index_uint');\n    this.setState({model});\n  }\n\n  updateState({props, changeFlags: {dataChanged}}) {\n    if (dataChanged) {\n      this.countVertices(props.data);\n      this.state.attributeManager.invalidateAll();\n    }\n  }\n\n  getModel(gl) {\n    return new Model(gl, {\n      id: this.props.id,\n      vs: tripsVertex,\n      fs: tripsFragment,\n      geometry: new Geometry({\n        id: this.props.id,\n        drawMode: 'LINES'\n      }),\n      vertexCount: 0,\n      isIndexed: true,\n      // TODO-state-management: onBeforeRender can go to settings, onAfterRender, we should\n      // move this settings of corresponding draw.\n      onBeforeRender: () => {\n        gl.enable(gl.BLEND);\n        gl.enable(gl.POLYGON_OFFSET_FILL);\n        gl.polygonOffset(2.0, 1.0);\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE);\n        gl.blendEquation(gl.FUNC_ADD);\n      },\n      onAfterRender: () => {\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n        gl.disable(gl.POLYGON_OFFSET_FILL);\n      }\n    });\n  }\n\n  countVertices(data) {\n    if (!data) {\n      return;\n    }\n\n    const {getPath} = this.props;\n    let vertexCount = 0;\n    const pathLengths = data.reduce((acc, d) => {\n      const l = getPath(d).length;\n      vertexCount += l;\n      return [...acc, l];\n    }, []);\n    this.setState({pathLengths, vertexCount});\n  }\n\n  draw({uniforms}) {\n    const {trailLength, currentTime} = this.props;\n    this.state.model.render(\n      Object.assign({}, uniforms, {\n        trailLength,\n        currentTime\n      })\n    );\n  }\n\n  calculateIndices(attribute) {\n    const {pathLengths, vertexCount} = this.state;\n\n    const indicesCount = (vertexCount - pathLengths.length) * 2;\n    const indices = new Uint32Array(indicesCount);\n\n    let offset = 0;\n    let index = 0;\n    for (let i = 0; i < pathLengths.length; i++) {\n      const l = pathLengths[i];\n      indices[index++] = offset;\n      for (let j = 1; j < l - 1; j++) {\n        indices[index++] = j + offset;\n        indices[index++] = j + offset;\n      }\n      indices[index++] = offset + l - 1;\n      offset += l;\n    }\n    attribute.value = indices;\n    this.state.model.setVertexCount(indicesCount);\n  }\n\n  calculatePositions(attribute) {\n    const {data, getPath} = this.props;\n    const {vertexCount} = this.state;\n    const positions = new Float32Array(vertexCount * 3);\n\n    let index = 0;\n    for (let i = 0; i < data.length; i++) {\n      const path = getPath(data[i]);\n      for (let j = 0; j < path.length; j++) {\n        const pt = path[j];\n        positions[index++] = pt[0];\n        positions[index++] = pt[1];\n        positions[index++] = pt[2];\n      }\n    }\n    attribute.value = positions;\n  }\n\n  calculateColors(attribute) {\n    const {data, getColor} = this.props;\n    const {pathLengths, vertexCount} = this.state;\n    const colors = new Float32Array(vertexCount * 3);\n\n    let index = 0;\n    for (let i = 0; i < data.length; i++) {\n      const color = getColor(data[i]);\n      const l = pathLengths[i];\n      for (let j = 0; j < l; j++) {\n        colors[index++] = color[0];\n        colors[index++] = color[1];\n        colors[index++] = color[2];\n      }\n    }\n    attribute.value = colors;\n  }\n}\n\nTripsLayer.layerName = 'TripsLayer';\nTripsLayer.defaultProps = defaultProps;\n"],"file":"trips-layer.js"}