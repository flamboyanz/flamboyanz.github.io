{"version":3,"sources":["../../../src/mesh-layer/mesh-layer.js"],"names":["Layer","COORDINATE_SYSTEM","GL","Model","Geometry","loadTextures","Texture2D","fp64","fp64LowPart","vs","fs","RADIAN_PER_DEGREE","Math","PI","assert","condition","message","Error","getTexture","gl","src","opts","Object","assign","urls","then","textures","catch","error","Promise","resolve","getTextureFromData","data","validateGeometryAttributes","attributes","positions","normals","texCoords","getGeometry","DEFAULT_COLOR","defaultProps","mesh","texture","sizeScale","type","value","min","parameters","depthTest","depthFunc","LEQUAL","lightSettings","getPosition","x","position","getColor","getYaw","yaw","angle","getPitch","pitch","getRoll","roll","MeshLayer","getShaders","projectModule","use64bitProjection","modules","initializeState","attributeManager","getAttributeManager","addInstanced","instancePositions","size","accessor","instancePositions64xy","update","calculateInstancePositions64xyLow","instanceRotations","calculateInstanceRotations","instanceColors","defaultValue","setState","emptyTexture","context","Uint8Array","width","height","updateState","props","oldProps","changeFlags","dataChanged","invalidateAll","_updateFP64","setTexture","state","model","delete","getModel","draw","uniforms","render","id","geometry","isInstanced","shaderCache","setUniforms","sampler","hasTexture","attribute","isFP64","use64bitPositions","constant","Float32Array","i","point","layerName"],"mappings":"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","sourcesContent":["// Note: This file will either be moved back to deck.gl or reformatted to web-monorepo standards\n// Disabling lint temporarily to facilitate copying code in and out of this repo\n/* eslint-disable */\n\n// Copyright (c) 2015 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, COORDINATE_SYSTEM} from '@deck.gl/core';\nimport GL from 'luma.gl/constants';\nimport {Model, Geometry, loadTextures, Texture2D, fp64} from 'luma.gl';\nconst {fp64LowPart} = fp64;\n\nimport vs from './mesh-layer-vertex.glsl';\nimport fs from './mesh-layer-fragment.glsl';\n\nconst RADIAN_PER_DEGREE = Math.PI / 180;\n\n// Replacement for the external assert method to reduce bundle size\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(`deck.gl: ${message}`);\n  }\n}\n\n/*\n * Load image data into luma.gl Texture2D objects\n * @param {WebGLContext} gl\n * @param {String|Texture2D|HTMLImageElement|Uint8ClampedArray} src - source of image data\n *   can be url string, Texture2D object, HTMLImageElement or pixel array\n * @returns {Promise} resolves to an object with name -> texture mapping\n */\nfunction getTexture(gl, src, opts) {\n  if (typeof src === 'string') {\n    // Url, load the image\n    return loadTextures(gl, Object.assign({urls: [src]}, opts))\n      .then(textures => textures[0])\n      .catch(error => {\n        throw new Error(`Could not load texture from ${src}: ${error}`);\n      });\n  }\n  return new Promise(resolve => resolve(getTextureFromData(gl, src, opts)));\n}\n\n/*\n * Convert image data into texture\n * @returns {Texture2D} texture\n */\nfunction getTextureFromData(gl, data, opts) {\n  if (data instanceof Texture2D) {\n    return data;\n  }\n  return new Texture2D(gl, Object.assign({data}, opts));\n}\n\nfunction validateGeometryAttributes(attributes) {\n  assert(attributes.positions && attributes.normals && attributes.texCoords);\n}\n\n/*\n * Convert mesh data into geometry\n * @returns {Geometry} geometry\n */\nfunction getGeometry(data) {\n  if (data instanceof Geometry) {\n    validateGeometryAttributes(data.attributes);\n    return data;\n  } else if (data.positions) {\n    validateGeometryAttributes(data);\n    return new Geometry({\n      attributes: data\n    });\n  }\n  throw Error('Invalid mesh');\n}\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst defaultProps = {\n  mesh: null,\n  texture: null,\n  sizeScale: {type: 'number', value: 1, min: 0},\n\n  // TODO - parameters should be merged, not completely overridden\n  parameters: {\n    depthTest: true,\n    depthFunc: GL.LEQUAL\n  },\n  fp64: false,\n  // Optional settings for 'lighting' shader module\n  lightSettings: {},\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  // yaw, pitch and roll are in degrees\n  // https://en.wikipedia.org/wiki/Euler_angles\n  getYaw: {type: 'accessor', value: x => x.yaw || x.angle || 0},\n  getPitch: {type: 'accessor', value: x => x.pitch || 0},\n  getRoll: {type: 'accessor', value: x => x.roll || 0}\n};\n\nexport default class MeshLayer extends Layer {\n  getShaders() {\n    const projectModule = this.use64bitProjection() ? 'project64' : 'project32';\n    return {vs, fs, modules: [projectModule, 'lighting', 'picking']};\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        accessor: 'getPosition'\n      },\n      instancePositions64xy: {\n        size: 2,\n        accessor: 'getPosition',\n        update: this.calculateInstancePositions64xyLow\n      },\n      instanceRotations: {\n        size: 3,\n        accessor: ['getYaw', 'getPitch', 'getRoll'],\n        update: this.calculateInstanceRotations\n      },\n      instanceColors: {\n        size: 4,\n        accessor: 'getColor',\n        defaultValue: [0, 0, 0, 255]\n      }\n    });\n\n    this.setState({\n      // Avoid luma.gl's missing uniform warning\n      // TODO - add feature to luma.gl to specify ignored uniforms?\n      emptyTexture: new Texture2D(this.context.gl, {\n        data: new Uint8Array(4),\n        width: 1,\n        height: 1\n      })\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    const attributeManager = this.getAttributeManager();\n\n    // super.updateState({props, oldProps, changeFlags});\n    if (changeFlags.dataChanged) {\n      attributeManager.invalidateAll();\n    }\n\n    this._updateFP64(props, oldProps);\n\n    if (props.texture !== oldProps.texture) {\n      this.setTexture(props.texture);\n    }\n  }\n\n  _updateFP64(props, oldProps) {\n    if (props.fp64 !== oldProps.fp64) {\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n\n      this.setState({model: this.getModel(this.context.gl)});\n\n      this.setTexture(this.state.texture);\n\n      const attributeManager = this.getAttributeManager();\n      attributeManager.invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {sizeScale} = this.props;\n\n    this.state.model.render(\n      Object.assign({}, uniforms, {\n        sizeScale\n      })\n    );\n  }\n\n  getModel(gl) {\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: getGeometry(this.props.mesh),\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      })\n    );\n  }\n\n  setTexture(src) {\n    const {gl} = this.context;\n    const {model, emptyTexture} = this.state;\n\n    if (src) {\n      getTexture(gl, src).then(texture => {\n        model.setUniforms({sampler: texture, hasTexture: 1});\n        this.setState({texture});\n      });\n    } else {\n      // reset\n      this.state.model.setUniforms({sampler: emptyTexture, hasTexture: 0});\n      this.setState({texture: null});\n    }\n  }\n\n  calculateInstancePositions64xyLow(attribute) {\n    const isFP64 = this.use64bitPositions();\n    attribute.constant = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(2);\n      return;\n    }\n\n    const {data, getPosition} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    for (const point of data) {\n      const position = getPosition(point);\n      value[i++] = fp64LowPart(position[0]);\n      value[i++] = fp64LowPart(position[1]);\n    }\n  }\n\n  // yaw(z), pitch(y) and roll(x) in radians\n  calculateInstanceRotations(attribute) {\n    const {data, getYaw, getPitch, getRoll} = this.props;\n    const {value, size} = attribute;\n    let i = 0;\n    for (const point of data) {\n      value[i++] = getRoll(point) * RADIAN_PER_DEGREE;\n      value[i++] = getPitch(point) * RADIAN_PER_DEGREE;\n      value[i++] = getYaw(point) * RADIAN_PER_DEGREE;\n    }\n  }\n}\n\nMeshLayer.layerName = 'MeshLayer';\nMeshLayer.defaultProps = defaultProps;\n"],"file":"mesh-layer.js"}