{"version":3,"sources":["../../../src/bitmap-layer/bitmap-layer.js"],"names":["Layer","GL","Model","Geometry","loadTextures","BITMAP_VERTEX_SHADER","BITMAP_FRAGMENT_SHADER","MAX_BITMAPS","defaultProps","images","type","value","desaturate","min","max","blendMode","transparentColor","tintColor","getCenter","x","center","getRotation","rotation","BitmapLayer","initializeState","gl","context","setState","model","getModel","attributeManager","state","addInstanced","instanceCenter","size","accessor","instanceRotation","instanceBitmapIndex","update","calculateInstanceBitmapIndex","updateState","props","oldProps","changed","length","i","loadMapImagesToTextures","setUniforms","verts","positions","texCoords","forEach","vertex","push","id","vs","fs","shaderCache","geometry","drawMode","TRIANGLES","vertexCount","attributes","Float32Array","isInstanced","draw","uniforms","render","Object","assign","Math","urls","then","texture","getBitmapIndex","point","url","imageUrl","idx","indexOf","attribute","data","bitmapIndex","Number","isFinite","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer} from '@deck.gl/core';\nimport GL from 'luma.gl/constants';\nimport {Model, Geometry, loadTextures} from 'luma.gl';\n\nimport BITMAP_VERTEX_SHADER from './bitmap-layer-vertex';\nimport BITMAP_FRAGMENT_SHADER from './bitmap-layer-fragment';\n\n// Note: needs to match vertex shader\nconst MAX_BITMAPS = 11;\n\nconst defaultProps = {\n  images: {type: 'array', value: []},\n\n  desaturate: {type: 'number', min: 0, max: 1, value: 0},\n  blendMode: null,\n  // More context: because of the blending mode we're using for ground imagery,\n  // alpha is not effective when blending the bitmap layers with the base map.\n  // Instead we need to manually dim/blend rgb values with a background color.\n  transparentColor: {type: 'color', value: [0, 0, 0, 0]},\n  tintColor: {type: 'color', value: [255, 255, 255]},\n  // accessors\n  getCenter: {type: 'accessor', value: x => x.center},\n  getRotation: {type: 'accessor', value: x => x.rotation}\n};\n\n/*\n * @class\n * @param {object} props\n * @param {number} props.transparentColor - color to interpret transparency to\n * @param {number} props.tintColor - color bias\n */\nexport default class BitmapLayer extends Layer {\n  initializeState() {\n    const {gl} = this.context;\n    this.setState({model: this.getModel(gl)});\n\n    const {attributeManager} = this.state;\n    attributeManager.addInstanced({\n      instanceCenter: {size: 3, accessor: 'getCenter'},\n      instanceRotation: {size: 3, accessor: 'getRotation'},\n      instanceBitmapIndex: {size: 1, update: this.calculateInstanceBitmapIndex}\n    });\n  }\n\n  updateState({props, oldProps}) {\n    if (props.images !== oldProps.images) {\n      let changed = !oldProps.images || props.images.length !== oldProps.images.length;\n      if (!changed) {\n        for (let i = 0; i < props.images.length; ++i) {\n          changed = changed || props.images[i] !== oldProps.images[i];\n        }\n      }\n      if (changed) {\n        this.loadMapImagesToTextures();\n      }\n    }\n    const {desaturate} = props;\n    this.state.model.setUniforms({desaturate});\n  }\n\n  getModel(gl) {\n    // Two triangles making up a square to render the bitmap texture on\n    const verts = [[1, 1, 0], [-1, 1, 0], [1, -1, 0], [-1, 1, 0], [1, -1, 0], [-1, -1, 0]];\n    const positions = [];\n    const texCoords = [];\n    verts.forEach(vertex => {\n      // geometry: unit square centered on origin\n      positions.push(vertex[0] / 2, vertex[1] / 2, vertex[2] / 2);\n      // texture: unit square with bottom left in origin\n      texCoords.push(vertex[0] / 2 + 0.5, -vertex[1] / 2 + 0.5);\n    });\n\n    const model = new Model(gl, {\n      id: this.props.id,\n      vs: BITMAP_VERTEX_SHADER,\n      fs: BITMAP_FRAGMENT_SHADER,\n      shaderCache: this.context.shaderCache,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLES,\n        vertexCount: 6,\n        attributes: {\n          positions: new Float32Array(positions),\n          texCoords: new Float32Array(texCoords)\n        }\n      }),\n      isInstanced: true\n    });\n\n    return model;\n  }\n\n  draw({uniforms}) {\n    const {transparentColor, tintColor} = this.props;\n\n    // TODO fix zFighting\n\n    // Render the image\n    this.state.model.render(\n      Object.assign({}, uniforms, {\n        transparentColor,\n        tintColor\n      })\n    );\n  }\n\n  loadMapImagesToTextures() {\n    const {model} = this.state;\n    const {images} = this.props;\n    for (let i = 0; i < Math.min(images.length, MAX_BITMAPS); i++) {\n      loadTextures(this.context.gl, {\n        urls: [images[i]]\n      }).then(([texture]) => {\n        return model.setUniforms({[`uBitmap${i}`]: texture});\n      });\n    }\n  }\n\n  getBitmapIndex(point) {\n    const url = point.imageUrl;\n    const idx = Math.max(this.props.images.indexOf(url), 0);\n    return idx >= MAX_BITMAPS ? 0 : idx;\n  }\n\n  calculateInstanceBitmapIndex(attribute) {\n    const {data} = this.props;\n    const {value, size} = attribute;\n    let i = 0;\n    for (const point of data) {\n      const bitmapIndex = Number.isFinite(point.bitmapIndex)\n        ? point.bitmapIndex\n        : this.getBitmapIndex(point);\n      value[i] = bitmapIndex;\n      i += size;\n    }\n  }\n}\n\nBitmapLayer.layerName = 'BitmapLayer';\nBitmapLayer.defaultProps = defaultProps;\n"],"file":"bitmap-layer.js"}