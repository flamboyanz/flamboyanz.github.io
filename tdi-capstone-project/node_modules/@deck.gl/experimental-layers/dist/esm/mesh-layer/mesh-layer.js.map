{"version":3,"sources":["../../../src/mesh-layer/mesh-layer.js"],"names":["Layer","COORDINATE_SYSTEM","GL","Model","Geometry","loadTextures","Texture2D","fp64","fp64LowPart","vs","fs","RADIAN_PER_DEGREE","Math","PI","assert","condition","message","Error","getTexture","gl","src","opts","Object","assign","urls","then","textures","catch","error","Promise","resolve","getTextureFromData","data","validateGeometryAttributes","attributes","positions","normals","texCoords","getGeometry","DEFAULT_COLOR","defaultProps","mesh","texture","sizeScale","type","value","min","parameters","depthTest","depthFunc","LEQUAL","lightSettings","getPosition","x","position","getColor","getYaw","yaw","angle","getPitch","pitch","getRoll","roll","MeshLayer","projectModule","use64bitProjection","modules","attributeManager","getAttributeManager","addInstanced","instancePositions","size","accessor","instancePositions64xy","update","calculateInstancePositions64xyLow","instanceRotations","calculateInstanceRotations","instanceColors","defaultValue","setState","emptyTexture","context","Uint8Array","width","height","props","oldProps","changeFlags","dataChanged","invalidateAll","_updateFP64","setTexture","state","model","delete","getModel","uniforms","render","getShaders","id","geometry","isInstanced","shaderCache","setUniforms","sampler","hasTexture","attribute","isFP64","use64bitPositions","constant","Float32Array","i","point","layerName"],"mappings":"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","sourcesContent":["// Note: This file will either be moved back to deck.gl or reformatted to web-monorepo standards\n// Disabling lint temporarily to facilitate copying code in and out of this repo\n/* eslint-disable */\n\n// Copyright (c) 2015 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, COORDINATE_SYSTEM} from '@deck.gl/core';\nimport GL from 'luma.gl/constants';\nimport {Model, Geometry, loadTextures, Texture2D, fp64} from 'luma.gl';\nconst {fp64LowPart} = fp64;\n\nimport vs from './mesh-layer-vertex.glsl';\nimport fs from './mesh-layer-fragment.glsl';\n\nconst RADIAN_PER_DEGREE = Math.PI / 180;\n\n// Replacement for the external assert method to reduce bundle size\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(`deck.gl: ${message}`);\n  }\n}\n\n/*\n * Load image data into luma.gl Texture2D objects\n * @param {WebGLContext} gl\n * @param {String|Texture2D|HTMLImageElement|Uint8ClampedArray} src - source of image data\n *   can be url string, Texture2D object, HTMLImageElement or pixel array\n * @returns {Promise} resolves to an object with name -> texture mapping\n */\nfunction getTexture(gl, src, opts) {\n  if (typeof src === 'string') {\n    // Url, load the image\n    return loadTextures(gl, Object.assign({urls: [src]}, opts))\n      .then(textures => textures[0])\n      .catch(error => {\n        throw new Error(`Could not load texture from ${src}: ${error}`);\n      });\n  }\n  return new Promise(resolve => resolve(getTextureFromData(gl, src, opts)));\n}\n\n/*\n * Convert image data into texture\n * @returns {Texture2D} texture\n */\nfunction getTextureFromData(gl, data, opts) {\n  if (data instanceof Texture2D) {\n    return data;\n  }\n  return new Texture2D(gl, Object.assign({data}, opts));\n}\n\nfunction validateGeometryAttributes(attributes) {\n  assert(attributes.positions && attributes.normals && attributes.texCoords);\n}\n\n/*\n * Convert mesh data into geometry\n * @returns {Geometry} geometry\n */\nfunction getGeometry(data) {\n  if (data instanceof Geometry) {\n    validateGeometryAttributes(data.attributes);\n    return data;\n  } else if (data.positions) {\n    validateGeometryAttributes(data);\n    return new Geometry({\n      attributes: data\n    });\n  }\n  throw Error('Invalid mesh');\n}\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst defaultProps = {\n  mesh: null,\n  texture: null,\n  sizeScale: {type: 'number', value: 1, min: 0},\n\n  // TODO - parameters should be merged, not completely overridden\n  parameters: {\n    depthTest: true,\n    depthFunc: GL.LEQUAL\n  },\n  fp64: false,\n  // Optional settings for 'lighting' shader module\n  lightSettings: {},\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  // yaw, pitch and roll are in degrees\n  // https://en.wikipedia.org/wiki/Euler_angles\n  getYaw: {type: 'accessor', value: x => x.yaw || x.angle || 0},\n  getPitch: {type: 'accessor', value: x => x.pitch || 0},\n  getRoll: {type: 'accessor', value: x => x.roll || 0}\n};\n\nexport default class MeshLayer extends Layer {\n  getShaders() {\n    const projectModule = this.use64bitProjection() ? 'project64' : 'project32';\n    return {vs, fs, modules: [projectModule, 'lighting', 'picking']};\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        accessor: 'getPosition'\n      },\n      instancePositions64xy: {\n        size: 2,\n        accessor: 'getPosition',\n        update: this.calculateInstancePositions64xyLow\n      },\n      instanceRotations: {\n        size: 3,\n        accessor: ['getYaw', 'getPitch', 'getRoll'],\n        update: this.calculateInstanceRotations\n      },\n      instanceColors: {\n        size: 4,\n        accessor: 'getColor',\n        defaultValue: [0, 0, 0, 255]\n      }\n    });\n\n    this.setState({\n      // Avoid luma.gl's missing uniform warning\n      // TODO - add feature to luma.gl to specify ignored uniforms?\n      emptyTexture: new Texture2D(this.context.gl, {\n        data: new Uint8Array(4),\n        width: 1,\n        height: 1\n      })\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    const attributeManager = this.getAttributeManager();\n\n    // super.updateState({props, oldProps, changeFlags});\n    if (changeFlags.dataChanged) {\n      attributeManager.invalidateAll();\n    }\n\n    this._updateFP64(props, oldProps);\n\n    if (props.texture !== oldProps.texture) {\n      this.setTexture(props.texture);\n    }\n  }\n\n  _updateFP64(props, oldProps) {\n    if (props.fp64 !== oldProps.fp64) {\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n\n      this.setState({model: this.getModel(this.context.gl)});\n\n      this.setTexture(this.state.texture);\n\n      const attributeManager = this.getAttributeManager();\n      attributeManager.invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {sizeScale} = this.props;\n\n    this.state.model.render(\n      Object.assign({}, uniforms, {\n        sizeScale\n      })\n    );\n  }\n\n  getModel(gl) {\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: getGeometry(this.props.mesh),\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      })\n    );\n  }\n\n  setTexture(src) {\n    const {gl} = this.context;\n    const {model, emptyTexture} = this.state;\n\n    if (src) {\n      getTexture(gl, src).then(texture => {\n        model.setUniforms({sampler: texture, hasTexture: 1});\n        this.setState({texture});\n      });\n    } else {\n      // reset\n      this.state.model.setUniforms({sampler: emptyTexture, hasTexture: 0});\n      this.setState({texture: null});\n    }\n  }\n\n  calculateInstancePositions64xyLow(attribute) {\n    const isFP64 = this.use64bitPositions();\n    attribute.constant = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(2);\n      return;\n    }\n\n    const {data, getPosition} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    for (const point of data) {\n      const position = getPosition(point);\n      value[i++] = fp64LowPart(position[0]);\n      value[i++] = fp64LowPart(position[1]);\n    }\n  }\n\n  // yaw(z), pitch(y) and roll(x) in radians\n  calculateInstanceRotations(attribute) {\n    const {data, getYaw, getPitch, getRoll} = this.props;\n    const {value, size} = attribute;\n    let i = 0;\n    for (const point of data) {\n      value[i++] = getRoll(point) * RADIAN_PER_DEGREE;\n      value[i++] = getPitch(point) * RADIAN_PER_DEGREE;\n      value[i++] = getYaw(point) * RADIAN_PER_DEGREE;\n    }\n  }\n}\n\nMeshLayer.layerName = 'MeshLayer';\nMeshLayer.defaultProps = defaultProps;\n"],"file":"mesh-layer.js"}