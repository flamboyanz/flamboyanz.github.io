{"version":3,"sources":["../../../src/path-outline-layer/path-outline-layer.js"],"names":["PathLayer","GL","Framebuffer","Texture2D","outline","injectShaderCode","source","declarations","code","INJECT_DECLARATIONS","INJECT_CODE","replace","concat","VS_DECLARATIONS","VS_CODE","FS_CODE","defaultProps","getZLevel","type","value","PathOutlineLayer","shaders","Object","assign","modules","vs","fs","context","setState","outlineFramebuffer","gl","dummyTexture","state","attributeManager","addInstanced","instanceZLevel","size","UNSIGNED_BYTE","update","calculateZLevels","accessor","moduleParameters","parameters","uniforms","props","rounded","miterLimit","widthScale","widthMinPixels","widthMaxPixels","dashJustified","jointType","Number","alignMode","resize","clear","color","depth","model","updateModuleSettings","outlineEnabled","outlineRenderShadowmap","outlineShadowmap","draw","depthTest","blendEquation","MAX","framebuffer","attribute","pathTesselator","_updateAttribute","target","getValue","object","index","layerName"],"mappings":"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","sourcesContent":["import {PathLayer} from '@deck.gl/layers';\nimport GL from 'luma.gl/constants';\nimport {Framebuffer, Texture2D} from 'luma.gl';\nimport outline from '../shaderlib/outline/outline';\n\n// TODO - this should be built into assembleShaders\nfunction injectShaderCode({source, declarations = '', code = ''}) {\n  const INJECT_DECLARATIONS = /^/;\n  const INJECT_CODE = /}[^{}]*$/;\n\n  return source\n    .replace(INJECT_DECLARATIONS, declarations)\n    .replace(INJECT_CODE, code.concat('\\n}\\n'));\n}\n\nconst VS_DECLARATIONS = `\\\n#ifdef MODULE_OUTLINE\n  attribute float instanceZLevel;\n#endif\n`;\n\nconst VS_CODE = `\\\n#ifdef MODULE_OUTLINE\n  outline_setUV(gl_Position);\n  outline_setZLevel(instanceZLevel);\n#endif\n`;\n\nconst FS_CODE = `\\\n#ifdef MODULE_OUTLINE\n  gl_FragColor = outline_filterColor(gl_FragColor);\n#endif\n`;\n\nconst defaultProps = {\n  getZLevel: {type: 'accessor', value: 0}\n};\n\nexport default class PathOutlineLayer extends PathLayer {\n  // Override getShaders to inject the outline module\n  getShaders() {\n    const shaders = super.getShaders();\n    return Object.assign({}, shaders, {\n      modules: shaders.modules.concat([outline]),\n      vs: injectShaderCode({source: shaders.vs, declarations: VS_DECLARATIONS, code: VS_CODE}),\n      fs: injectShaderCode({source: shaders.fs, code: FS_CODE})\n    });\n  }\n\n  initializeState(context) {\n    super.initializeState(context);\n\n    // Create an outline \"shadow\" map\n    // TODO - we should create a single outlineMap for all layers\n    this.setState({\n      outlineFramebuffer: new Framebuffer(context.gl),\n      dummyTexture: new Texture2D(context.gl)\n    });\n\n    // Create an attribute manager\n    this.state.attributeManager.addInstanced({\n      instanceZLevel: {\n        size: 1,\n        type: GL.UNSIGNED_BYTE,\n        update: this.calculateZLevels,\n        accessor: 'getZLevel'\n      }\n    });\n  }\n\n  // Override draw to add render module\n  draw({moduleParameters = {}, parameters, uniforms, context}) {\n    // Need to calculate same uniforms as base layer\n    const {\n      rounded,\n      miterLimit,\n      widthScale,\n      widthMinPixels,\n      widthMaxPixels,\n      dashJustified\n    } = this.props;\n\n    uniforms = Object.assign({}, uniforms, {\n      jointType: Number(rounded),\n      alignMode: Number(dashJustified),\n      widthScale,\n      miterLimit,\n      widthMinPixels,\n      widthMaxPixels\n    });\n\n    // Render the outline shadowmap (based on segment z orders)\n    const {outlineFramebuffer, dummyTexture} = this.state;\n    outlineFramebuffer.resize();\n    outlineFramebuffer.clear({color: true, depth: true});\n\n    this.state.model.updateModuleSettings({\n      outlineEnabled: true,\n      outlineRenderShadowmap: true,\n      outlineShadowmap: dummyTexture\n    });\n\n    this.state.model.draw({\n      uniforms: Object.assign({}, uniforms, {\n        jointType: 0,\n        widthScale: this.props.widthScale * 1.3\n      }),\n      parameters: {\n        depthTest: false,\n        blendEquation: GL.MAX // Biggest value needs to go into buffer\n      },\n      framebuffer: outlineFramebuffer\n    });\n\n    // Now use the outline shadowmap to render the lines (with outlines)\n    this.state.model.updateModuleSettings({\n      outlineEnabled: true,\n      outlineRenderShadowmap: false,\n      outlineShadowmap: outlineFramebuffer\n    });\n    this.state.model.draw({\n      uniforms: Object.assign({}, uniforms, {\n        jointType: Number(rounded),\n        widthScale: this.props.widthScale\n      }),\n      parameters: {\n        depthTest: false\n      }\n    });\n  }\n\n  calculateZLevels(attribute) {\n    const {getZLevel} = this.props;\n    const {pathTesselator} = this.state;\n\n    attribute.value = pathTesselator._updateAttribute({\n      target: attribute.value,\n      size: 1,\n      getValue: (object, index) => [getZLevel(object, index) || 0]\n    });\n  }\n}\n\nPathOutlineLayer.layerName = 'PathOutlineLayer';\nPathOutlineLayer.defaultProps = defaultProps;\n"],"file":"path-outline-layer.js"}