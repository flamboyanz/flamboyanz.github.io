{"version":3,"sources":["../../../src/bitmap-layer/bitmap-layer.js"],"names":["MAX_BITMAPS","defaultProps","images","type","value","desaturate","min","max","blendMode","transparentColor","tintColor","getCenter","x","center","getRotation","rotation","BitmapLayer","gl","context","setState","model","getModel","attributeManager","state","addInstanced","instanceCenter","size","accessor","instanceRotation","instanceBitmapIndex","update","calculateInstanceBitmapIndex","props","oldProps","changed","length","i","loadMapImagesToTextures","setUniforms","verts","positions","texCoords","forEach","vertex","push","Model","id","vs","BITMAP_VERTEX_SHADER","fs","BITMAP_FRAGMENT_SHADER","shaderCache","geometry","Geometry","drawMode","GL","TRIANGLES","vertexCount","attributes","Float32Array","isInstanced","uniforms","render","Object","assign","urls","then","texture","Math","point","url","imageUrl","idx","indexOf","attribute","data","bitmapIndex","Number","isFinite","getBitmapIndex","Layer","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer} from '@deck.gl/core';\nimport GL from 'luma.gl/constants';\nimport {Model, Geometry, loadTextures} from 'luma.gl';\n\nimport BITMAP_VERTEX_SHADER from './bitmap-layer-vertex';\nimport BITMAP_FRAGMENT_SHADER from './bitmap-layer-fragment';\n\n// Note: needs to match vertex shader\nconst MAX_BITMAPS = 11;\n\nconst defaultProps = {\n  images: {type: 'array', value: []},\n\n  desaturate: {type: 'number', min: 0, max: 1, value: 0},\n  blendMode: null,\n  // More context: because of the blending mode we're using for ground imagery,\n  // alpha is not effective when blending the bitmap layers with the base map.\n  // Instead we need to manually dim/blend rgb values with a background color.\n  transparentColor: {type: 'color', value: [0, 0, 0, 0]},\n  tintColor: {type: 'color', value: [255, 255, 255]},\n  // accessors\n  getCenter: {type: 'accessor', value: x => x.center},\n  getRotation: {type: 'accessor', value: x => x.rotation}\n};\n\n/*\n * @class\n * @param {object} props\n * @param {number} props.transparentColor - color to interpret transparency to\n * @param {number} props.tintColor - color bias\n */\nexport default class BitmapLayer extends Layer {\n  initializeState() {\n    const {gl} = this.context;\n    this.setState({model: this.getModel(gl)});\n\n    const {attributeManager} = this.state;\n    attributeManager.addInstanced({\n      instanceCenter: {size: 3, accessor: 'getCenter'},\n      instanceRotation: {size: 3, accessor: 'getRotation'},\n      instanceBitmapIndex: {size: 1, update: this.calculateInstanceBitmapIndex}\n    });\n  }\n\n  updateState({props, oldProps}) {\n    if (props.images !== oldProps.images) {\n      let changed = !oldProps.images || props.images.length !== oldProps.images.length;\n      if (!changed) {\n        for (let i = 0; i < props.images.length; ++i) {\n          changed = changed || props.images[i] !== oldProps.images[i];\n        }\n      }\n      if (changed) {\n        this.loadMapImagesToTextures();\n      }\n    }\n    const {desaturate} = props;\n    this.state.model.setUniforms({desaturate});\n  }\n\n  getModel(gl) {\n    // Two triangles making up a square to render the bitmap texture on\n    const verts = [[1, 1, 0], [-1, 1, 0], [1, -1, 0], [-1, 1, 0], [1, -1, 0], [-1, -1, 0]];\n    const positions = [];\n    const texCoords = [];\n    verts.forEach(vertex => {\n      // geometry: unit square centered on origin\n      positions.push(vertex[0] / 2, vertex[1] / 2, vertex[2] / 2);\n      // texture: unit square with bottom left in origin\n      texCoords.push(vertex[0] / 2 + 0.5, -vertex[1] / 2 + 0.5);\n    });\n\n    const model = new Model(gl, {\n      id: this.props.id,\n      vs: BITMAP_VERTEX_SHADER,\n      fs: BITMAP_FRAGMENT_SHADER,\n      shaderCache: this.context.shaderCache,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLES,\n        vertexCount: 6,\n        attributes: {\n          positions: new Float32Array(positions),\n          texCoords: new Float32Array(texCoords)\n        }\n      }),\n      isInstanced: true\n    });\n\n    return model;\n  }\n\n  draw({uniforms}) {\n    const {transparentColor, tintColor} = this.props;\n\n    // TODO fix zFighting\n\n    // Render the image\n    this.state.model.render(\n      Object.assign({}, uniforms, {\n        transparentColor,\n        tintColor\n      })\n    );\n  }\n\n  loadMapImagesToTextures() {\n    const {model} = this.state;\n    const {images} = this.props;\n    for (let i = 0; i < Math.min(images.length, MAX_BITMAPS); i++) {\n      loadTextures(this.context.gl, {\n        urls: [images[i]]\n      }).then(([texture]) => {\n        return model.setUniforms({[`uBitmap${i}`]: texture});\n      });\n    }\n  }\n\n  getBitmapIndex(point) {\n    const url = point.imageUrl;\n    const idx = Math.max(this.props.images.indexOf(url), 0);\n    return idx >= MAX_BITMAPS ? 0 : idx;\n  }\n\n  calculateInstanceBitmapIndex(attribute) {\n    const {data} = this.props;\n    const {value, size} = attribute;\n    let i = 0;\n    for (const point of data) {\n      const bitmapIndex = Number.isFinite(point.bitmapIndex)\n        ? point.bitmapIndex\n        : this.getBitmapIndex(point);\n      value[i] = bitmapIndex;\n      i += size;\n    }\n  }\n}\n\nBitmapLayer.layerName = 'BitmapLayer';\nBitmapLayer.defaultProps = defaultProps;\n"],"file":"bitmap-layer.js"}