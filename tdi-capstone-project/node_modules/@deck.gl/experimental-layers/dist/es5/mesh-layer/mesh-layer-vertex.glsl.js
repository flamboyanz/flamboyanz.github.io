"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = "\n#define SHADER_NAME mesh-layer-vs\nuniform float sizeScale;\nattribute vec3 positions;\nattribute vec3 normals;\nattribute vec2 texCoords;\nattribute vec3 instancePositions;\nattribute vec2 instancePositions64xy;\nattribute vec3 instanceRotations;\nattribute vec4 instanceColors;\nattribute vec3 instancePickingColors;\nvarying vec2 vTexCoord;\nvarying vec4 vColor;\nvarying float vLightWeight;\nmat3 getRotationMatrix(vec3 rotation) {\n  float sr = sin(rotation.x);\n  float sp = sin(rotation.y);\n  float sw = sin(rotation.z);\n\n  float cr = cos(rotation.x);\n  float cp = cos(rotation.y);\n  float cw = cos(rotation.z);\n\n  return mat3(\n    cw * cp,\n    sw * cp,\n    -sp,\n    -sw * cr + cw * sp * sr,\n    cw * cr + sw * sp * sr,\n    cp * sr,\n    sw * sr + cw * sp * cr,\n    -cw * sr + sw * sp * cr,\n    cp * cr\n  );\n}\n\nvoid main(void) {\n  mat3 rotationMatrix = getRotationMatrix(instanceRotations);\n\n  vec3 pos = positions;\n  pos = rotationMatrix * pos;\n  pos = project_scale(pos * sizeScale);\n  if (project_uPixelsPerMeter.y < 0.0) {\n    pos.y = -pos.y;\n  }\n\n  vec4 worldPosition;\n  gl_Position = project_position_to_clipspace(instancePositions, instancePositions64xy, pos, worldPosition);\n\n  picking_setPickingColor(instancePickingColors);\n\n  vTexCoord = texCoords;\n  vColor = instanceColors;\n  vLightWeight = lighting_getLightWeight(worldPosition.xyz, project_normal(normals));\n}\n";
exports.default = _default;
//# sourceMappingURL=mesh-layer-vertex.glsl.js.map