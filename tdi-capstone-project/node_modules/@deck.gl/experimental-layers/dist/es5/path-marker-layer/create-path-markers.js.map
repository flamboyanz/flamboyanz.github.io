{"version":3,"sources":["../../../src/path-marker-layer/create-path-markers.js"],"names":["getLineLength","vPoints","lineLength","i","length","distance","DEFAULT_COLOR","DEFAULT_DIRECTION","forward","backward","createPathMarkers","data","getPath","x","path","getDirection","direction","getColor","getMarkerPercentages","projectFlat","markers","object","color","map","p","Vector2","vPointsReverse","slice","reverse","percentages","percentage","marker","createMarkerAlongPath","push","distanceAlong","currentDistance","previousDistance","vDirection","clone","subtract","normalize","along","vCenter","multiply","add","vDirection2","angle","verticalAngle","Math","PI","position","y"],"mappings":"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","sourcesContent":["import {Vector2} from 'math.gl';\n\nfunction getLineLength(vPoints) {\n  // calculate total length\n  let lineLength = 0;\n  for (let i = 0; i < vPoints.length - 1; i++) {\n    lineLength += vPoints[i].distance(vPoints[i + 1]);\n  }\n  return lineLength;\n}\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst DEFAULT_DIRECTION = {forward: true, backward: false};\n\nexport default function createPathMarkers({\n  data,\n  getPath = x => x.path,\n  getDirection = x => x.direction,\n  getColor = x => DEFAULT_COLOR,\n  getMarkerPercentages = x => [0.5],\n  projectFlat\n}) {\n  const markers = [];\n\n  for (const object of data) {\n    const path = getPath(object);\n    const direction = getDirection(object) || DEFAULT_DIRECTION;\n    const color = getColor(object);\n\n    const vPoints = path.map(p => new Vector2(p));\n    const vPointsReverse = vPoints.slice(0).reverse();\n\n    // calculate total length\n    const lineLength = getLineLength(vPoints);\n\n    // Ask for where to put markers\n    const percentages = getMarkerPercentages(object, {lineLength});\n\n    // Create the markers\n    for (const percentage of percentages) {\n      if (direction.forward) {\n        const marker = createMarkerAlongPath({\n          path: vPoints,\n          percentage,\n          lineLength,\n          color,\n          object,\n          projectFlat\n        });\n        markers.push(marker);\n      }\n\n      if (direction.backward) {\n        const marker = createMarkerAlongPath({\n          path: vPointsReverse,\n          percentage,\n          lineLength,\n          color,\n          object,\n          projectFlat\n        });\n        markers.push(marker);\n      }\n    }\n  }\n\n  return markers;\n}\n\nfunction createMarkerAlongPath({path, percentage, lineLength, color, object, projectFlat}) {\n  const distanceAlong = lineLength * percentage;\n  let currentDistance = 0;\n  let previousDistance = 0;\n  let i = 0;\n  for (i = 0; i < path.length - 1; i++) {\n    currentDistance += path[i].distance(path[i + 1]);\n    if (currentDistance > distanceAlong) {\n      break;\n    }\n    previousDistance = currentDistance;\n  }\n\n  const vDirection = path[i + 1]\n    .clone()\n    .subtract(path[i])\n    .normalize();\n  const along = distanceAlong - previousDistance;\n  const vCenter = vDirection\n    .clone()\n    .multiply(new Vector2(along, along))\n    .add(path[i]);\n\n  const vDirection2 = new Vector2(projectFlat(path[i + 1])).subtract(projectFlat(path[i]));\n  const angle = (-vDirection2.verticalAngle() * 180) / Math.PI;\n\n  return {position: [vCenter.x, vCenter.y, 0], angle, color, object};\n}\n"],"file":"create-path-markers.js"}