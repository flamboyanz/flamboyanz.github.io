"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _deck = require("deck.gl");

var _tileCache = _interopRequireDefault(require("./utils/tile-cache"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var defaultProps = {
  renderSubLayers: function renderSubLayers(props) {
    return new _deck.GeoJsonLayer(props);
  },
  getTileData: function getTileData(_ref) {
    var x = _ref.x,
        y = _ref.y,
        z = _ref.z;
    return Promise.resolve(null);
  },
  onDataLoaded: function onDataLoaded() {},
  // eslint-disable-next-line
  onGetTileDataError: function onGetTileDataError(err) {
    return console.error(err);
  },
  maxZoom: null,
  minZoom: null,
  maxCacheSize: null
};

var TileLayer =
/*#__PURE__*/
function (_CompositeLayer) {
  _inherits(TileLayer, _CompositeLayer);

  function TileLayer() {
    _classCallCheck(this, TileLayer);

    return _possibleConstructorReturn(this, _getPrototypeOf(TileLayer).apply(this, arguments));
  }

  _createClass(TileLayer, [{
    key: "initializeState",
    value: function initializeState() {
      var _this$props = this.props,
          maxZoom = _this$props.maxZoom,
          minZoom = _this$props.minZoom,
          getTileData = _this$props.getTileData,
          onGetTileDataError = _this$props.onGetTileDataError;
      this.state = {
        tiles: [],
        tileCache: new _tileCache.default({
          getTileData: getTileData,
          maxZoom: maxZoom,
          minZoom: minZoom,
          onGetTileDataError: onGetTileDataError
        }),
        isLoaded: false
      };
    }
  }, {
    key: "shouldUpdateState",
    value: function shouldUpdateState(_ref2) {
      var changeFlags = _ref2.changeFlags;
      return changeFlags.somethingChanged;
    }
  }, {
    key: "updateState",
    value: function updateState(_ref3) {
      var _this = this;

      var props = _ref3.props,
          oldProps = _ref3.oldProps,
          context = _ref3.context,
          changeFlags = _ref3.changeFlags;
      var onDataLoaded = props.onDataLoaded,
          onGetTileDataError = props.onGetTileDataError;

      if (changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getTileData)) {
        var getTileData = props.getTileData,
            maxZoom = props.maxZoom,
            minZoom = props.minZoom,
            maxCacheSize = props.maxCacheSize;
        this.state.tileCache.finalize();
        this.setState({
          tileCache: new _tileCache.default({
            getTileData: getTileData,
            maxSize: maxCacheSize,
            maxZoom: maxZoom,
            minZoom: minZoom,
            onGetTileDataError: onGetTileDataError
          })
        });
      }

      if (changeFlags.viewportChanged) {
        var viewport = context.viewport;
        var z = this.getLayerZoomLevel();

        if (viewport.id !== 'DEFAULT-INITIAL-VIEWPORT') {
          this.state.tileCache.update(viewport, function (tiles) {
            var currTiles = tiles.filter(function (tile) {
              return tile.z === z;
            });
            var allCurrTilesLoaded = currTiles.every(function (tile) {
              return tile.isLoaded;
            });

            _this.setState({
              tiles: tiles,
              isLoaded: allCurrTilesLoaded
            });

            if (!allCurrTilesLoaded) {
              Promise.all(currTiles.map(function (tile) {
                return tile.data;
              })).then(function () {
                _this.setState({
                  isLoaded: true
                });

                onDataLoaded(currTiles.filter(function (tile) {
                  return tile._data;
                }).map(function (tile) {
                  return tile._data;
                }));
              });
            } else {
              onDataLoaded(currTiles.filter(function (tile) {
                return tile._data;
              }).map(function (tile) {
                return tile._data;
              }));
            }
          });
        }
      }
    }
  }, {
    key: "getPickingInfo",
    value: function getPickingInfo(_ref4) {
      var info = _ref4.info,
          sourceLayer = _ref4.sourceLayer;
      info.sourceLayer = sourceLayer;
      info.tile = sourceLayer.props.tile;
      return info;
    }
  }, {
    key: "getLayerZoomLevel",
    value: function getLayerZoomLevel() {
      var z = Math.floor(this.context.viewport.zoom);
      var _this$props2 = this.props,
          maxZoom = _this$props2.maxZoom,
          minZoom = _this$props2.minZoom;

      if (maxZoom && parseInt(maxZoom, 10) === maxZoom && z > maxZoom) {
        return maxZoom;
      } else if (minZoom && parseInt(minZoom, 10) === minZoom && z < minZoom) {
        return minZoom;
      }

      return z;
    }
  }, {
    key: "renderLayers",
    value: function renderLayers() {
      var _this2 = this;

      // eslint-disable-next-line no-unused-vars
      var _this$props3 = this.props,
          getTileData = _this$props3.getTileData,
          renderSubLayers = _this$props3.renderSubLayers,
          visible = _this$props3.visible,
          geoProps = _objectWithoutProperties(_this$props3, ["getTileData", "renderSubLayers", "visible"]);

      var z = this.getLayerZoomLevel();
      return this.state.tiles.map(function (tile) {
        return renderSubLayers(_objectSpread({}, geoProps, {
          id: "".concat(_this2.id, "-").concat(tile.x, "-").concat(tile.y, "-").concat(tile.z),
          data: tile.data,
          visible: visible && (!_this2.state.isLoaded || tile.z === z),
          tile: tile
        }));
      });
    }
  }]);

  return TileLayer;
}(_deck.CompositeLayer);

exports.default = TileLayer;
TileLayer.layerName = 'TileLayer';
TileLayer.defaultProps = defaultProps;
//# sourceMappingURL=tile-layer.js.map